float4x4 World;
float4x4 View;
float4x4 Projection;
float movX;
float movY;
float k;

sampler s0;

struct VertexShaderInput
{
	float4 Position : POSITION;
};

struct VertexShaderOutput
{
	float4 Position : POSITION0;
};

VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
    VertexShaderOutput output;

    float4 worldPosition = mul(input.Position, World);
    float4 viewPosition = mul(worldPosition, View);
    output.Position = mul(viewPosition, Projection);


    return output;
}

float4 PixelShaderFunction(float2 coords : TEXCOORD0) : COLOR0
{
	float4 color = float4(1.0f, 1.0f, 1.0f, 1.0f);
	float2 newCoords = float2(-1, -1);
	float offsetX, offsetY;
	float m = 0;
	float w = 1 - abs(movX);
	float h = 1 - abs(movY);


	if (movX < 0)
	{
		offsetX = 0;
		m = w * k + (1 - k);

		if (movY < 0)
		{
			offsetY = 0;
		}
		else
		{
			offsetY = movY;
			m = movY + h - m;
		}
	}
	else
	{
		offsetX = movX;
		m = 0;

		if (movY < 0)
		{
			offsetY = 0;
			m = h - movY - m;
		}
		else
		{
			offsetY = movY;
		}
	}

	bool inBoxX, inBoxY;
	inBoxX = (coords.x >= offsetX && coords.x <= offsetX + w);
	inBoxY = (coords.y >= offsetY && coords.y <= offsetY + h);

	if (inBoxX && inBoxY)
	{
		newCoords.x = (coords.x - offsetX) / w;
		newCoords.y = (coords.y - offsetY) / h;
	}
	else
	{
		/*
		if (coords.y > coords.x * k && coords.y < (coords.x * k + h))
		{
			return float4(1, 1, 0, 1);
		}
		else if (coords.y < coords.x * k && coords.y > (coords.x - w) * k)
		{
			return float4(1, 0, 0, 1);
		}
		*/
		/*
		if (coords.y > coords.x * k + w * k +(1 - k) && coords.y < coords.x * k + h)
		{
			return float4(0, 1, 1, 1);
		}
		else if (coords.y < coords.x * k + (1 - k) && coords.y > (coords.x - w) * k)
		{
			return float4(0, 0, 1, 1);
		}
		*/
		if (coords.y > coords.x * k + m && coords.y < coords.x * k + m + h)
		{
			return float4(0, 1, 1, 1);
		}
		else if (coords.y < coords.x * k + m && coords.y > (coords.x - movX) * k)
		{
			return float4(0, 0, 1, 1);
		}
	}

	if (newCoords.x != -1 && newCoords.y != -1)
		color = tex2D(s0, newCoords);

    return color;
}

technique Technique1
{
    pass Pass1
    {
        PixelShader = compile ps_2_0 PixelShaderFunction();
    }
}
